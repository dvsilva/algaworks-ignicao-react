fecth api -> fazer requisições http

executar fetch no console do navegador
obter um post
fetch('https://jsonplaceholder.typicode.com/posts/1')
.then(res => res.json())

criar um post
fetch('https://jsonplaceholder.typicode.com/posts',{
    method: 'POST'
})
.then(res => res.json())

obter lista de post
fetch('https://jsonplaceholder.typicode.com/posts')
.then(res => res.json())

criar post com body
fetch('https://jsonplaceholder.typicode.com/posts',{
    method: 'POST',
    body: JSON.stringify({
        userId: 1,
        title: 'hello world',
        body: 'i am cool post'
    }),
    headers: {
        'Content-type': 'application/json'
    }
})
.then(res => res.json())

instalar axios no projeto
yarn add axios ou npm i axios

adicionar projeto backend (https://github.com/algaworks/api-alga-stock)
clonar projeto -> git clone https://github.com/algaworks/api-alga-stock.git
instalar dependencias -> npm i
criar arquivo .env na raiz do projeto
rodar configuração de banco de dados -> npm run setup
rodar api -> npm start

swagger editor (https://editor.swagger.io/)
copiar conteudo do arquivo -> https://github.com/algaworks/api-alga-stock/blob/master/openapi.yaml

mock -> conteudo de placeholder / dados de teste / dados estaticos
mockdata -> dados mockados
mockserver -> prove os dados de teste / não persiste dados / ajuda no teste da unidade de requisição

openapi 
- documentação padronizada de como a api deve se comportar
- fiel ao produto final
- ocorre em algumas versões / open api v3

instalar o mockserver prism -> npm install -g @stoplight/prism-cli
iniciar um mockserver a partir de um yaml -> prism mock openapi.yaml
